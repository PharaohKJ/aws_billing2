#!/usr/bin/env ruby

# integrate 'bundle install --standalone'
bundle_setup_path = File.expand_path('../../bundle/bundler/setup.rb', __FILE__)
require bundle_setup_path if File.exist?(bundle_setup_path)

require 'dotenv'
require 'thor'
require 'yaml'

PARAM_FILE = '~/.aws_billing2'.freeze
NICK_FILE = File.expand_path('~/.aws_billing2_nickname'.freeze).freeze

Dotenv.load(PARAM_FILE, '.env')

require_relative '../lib/aws_billing2'

class NickNameHelper
  def self.load
    nickname_map = {}
    nickname_map = YAML.load_file(NICK_FILE) if File.exist?(NICK_FILE)
    nickname_map
  end

  def self.save(d)
    File.open(NICK_FILE, 'w') { |f| f.write d.to_yaml }
  end
end

class Sub < Thor
  desc 'add', 'add Nickname'
  option :pay_id,
         desc: 'PayID',
         type: :string,
         required: true
  option :nick,
         desc: 'NickName',
         type: :string,
         required: true
  def add
    nicknames = NickNameHelper.load
    nicknames[options[:pay_id]] = options[:nick]
    NickNameHelper.save(nicknames)
  end

  desc 'list', 'list Nicknames'
  def list
    puts NickNameHelper.load.to_s
  end
end

Class.new(Thor) do
  # desc "parentcommand SUBCOMMAND", "Some Parent Command"
  desc 'nickname', 'nickname'
  subcommand 'nickname', Sub

  desc 'view', 'view'
  option :bucket_name,
         desc: 'your bucket name',
         type: :string,
         default: ENV['BUCKET_NAME']
  option :invoice_id,
         desc: 'your invoice id 1234567890',
         type: :string,
         default: ENV['INVOICE_ID']
  option :access_key_id,
         desc: 'your access key id',
         type: :string,
         default: ENV['ACCESS_KEY_ID']
  option :secret_access_key,
         desc: 'our secret access key',
         type: :string,
         default: ENV['SECRET_ACCESS_KEY']
  option :region,
         desc: 'region (ap-northeast-1)',
         type: :string,
         default: ENV['REGION']
  option :ypd,
         desc: 'yen per $',
         type: :numeric,
         default: ENV['YPD'].to_i || 125
  option :yearmonth,
         desc: 'target year-month(2016-03)',
         type: :string,
         aliases: '-y',
         default: Time.now.strftime('%Y-%m')
  option :save_param,
         desc: 'save parameters to ~/.aws_billing2',
         type: :boolean,
         default: false
  option :format,
         desc: 'cli or csv or json',
         type: :string,
         aliases: '-f',
         default: 'cli'
  option :total,
         desc: 'add total record',
         type: :boolean,
         default: true
  option :skip_zero,
         desc: 'skip cost zero record',
         type: :boolean,
         default: false
  def view
    ab = AwsBilling2::AwsBilling2.new(options.to_hash)
    ab.nickname(NickNameHelper.load)
    data = ab.fetch_bucket(
      bucket:     options['bucket_name'],
      yearmonth:  options['yearmonth'],
      invoice_id: options['invoice_id']
    )
    ab.parse(data)
    puts ab.gets_table
    return unless options['save_param']
    File.open(File.expand_path(PARAM_FILE), 'w') do |f|
      %w(BUCKET_NAME INVOICE_ID ACCESS_KEY_ID SECRET_ACCESS_KEY REGION YPD).each do |e|
        f.puts("#{e}=#{ENV[e]}")
      end
    end
  end

  desc 'cost', 'cost'
  option :access_key_id,
         desc: 'your access key id',
         type: :string,
         default: ENV['ACCESS_KEY_ID']
  option :secret_access_key,
         desc: 'our secret access key',
         type: :string,
         default: ENV['SECRET_ACCESS_KEY']
  option :region,
         desc: 'region (ap-northeast-1)',
         type: :string,
         default: ENV['REGION']
  def cost
    puts ENV['ACCESS_KEY_ID']
    puts ENV['SECRET_ACCESS_KEY']

    @aws_config = {}
    Aws.config = @aws_config
    values = options.to_hash
    %i[access_key_id secret_access_key region].each do |k|
      @aws_config[k] = values[k.to_s]
    end

    client = Aws::CostExplorer::Client.new
    resp = client.get_cost_and_usage(
      {
        time_period: {
          start: '2020-04-01', # required
          end: '2021-04-01', # required
        },
        granularity: 'DAILY', # accepts DAILY, MONTHLY
        metrics: ['UnblendedCost'],
        # filter:          {
        #   or:         [
        #                 {
        #                   # recursive Expression
        #                 },
        #               ],
        #   and:        [
        #                 {
        #                   # recursive Expression
        #                 },
        #               ],
        #   not:        {
        #     # recursive Expression
        #   },
        #   dimensions: {
        #     key: "AZ", # accepts AZ, INSTANCE_TYPE, LINKED_ACCOUNT, OPERATION, PURCHASE_TYPE, REGION, SERVICE, USAGE_TYPE, USAGE_TYPE_GROUP, RECORD_TYPE, OPERATING_SYSTEM, TENANCY, SCOPE, PLATFORM, SUBSCRIPTION_ID, LEGAL_ENTITY_NAME, DEPLOYMENT_OPTION, DATABASE_ENGINE, CACHE_ENGINE, INSTANCE_TYPE_FAMILY
        #     values: ["Value"],
        #   },
        #   tags:       {
        #     # key: "TagKey",
        #     # values: ["Value"],
        #   },
        # }, group_by:     [
        #                    {
        #                      type: "AZ", # accepts DIMENSION, TAG
        #                      key: "GroupDefinitionKey",
        #                    },
        #                  ],
        # next_page_token: "NextPageToken",
      })
    pp resp
    binding.irb
  end
end.start(ARGV)
